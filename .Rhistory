outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
unique(outcome_df$State)
unique(outcome_df$State) == names(table(outcome_df$State))
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Convert outcome column to numeric and remove rows with NAs in this column
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Creating empty dataframe which we will fill and return later
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
# Looping through each state
for(name in unique(outcome_df$State)){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Convert outcome column to numeric and remove rows with NAs in this column
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Creating empty dataframe which we will fill and return later
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
# Looping through each state
for(name in unique(outcome_df$State)){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
names(table(outcome_df$State))
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Convert outcome column to numeric and remove rows with NAs in this column
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Creating empty dataframe which we will fill and return later
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
# Looping through each state
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
na.omit(outcome_df)
?na.omit
outcome_df <- outcome_df[, c("Hospital.Name", "State", "col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"")]
outcome_df <- outcome_df[, c("Hospital.Name", "State", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(outcome_df)
names(outcome_df)[2]
names(outcome_df)[3]
names(outcome_df)[3] < "pneumonia"
names(outcome_df)[3] <- "pneumonia"
names(outcome_df)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% outcome_df$State)
stop('invalid state')
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
# Getting required states, converting to numeric, and removing NAs
states <- outcome_df[outcome_df['State'] == state, ]
states[, col_name] <- as.numeric(states[, col_name])
states <- states[!is.na(states[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
else if(num == 'worst')
num <- nrow(states)
else if(num > nrow(states))
return(NA)
# Ordering by hospital rating and hospital name, in that order.
ordered_states <- states[order(states[col_name], states['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank.
hospitals <- ordered_states[, 'Hospital.Name'][num]
hospitals
}
rankhospital("TX", "heart failure", 4)      # "DETAR HOSPITAL NAVARRO
rankhospital("MD", "heart attack", "worst") # "HARFORD MEMORIAL HOSPITAL"
rankhospital("MN", "heart attack", 5000)    # NA
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available", stringsAsFactors = FALSE)
str(outcome_df)
rm(list = ls())
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available", stringsAsFactors = FALSE)
str(outcome_df)
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available", stringsAsFactors = FALSE)
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Subsetting the 3 columns that we need out of the 46 total columns.
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
str(outcome_df)
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
outcome_df[col_name]
sort(outcome_df[col_name])
sort(outcome_df[col_name], )
sort(outcome_df[. col_name])
sort(outcome_df[, col_name])
?read.csv
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_df
outcome_df[, col_name]
default.stringsAsFactors()
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = 'Not Available', stringsAsFactors	= FALSE)
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
dim(outcome_df)
outcome_df[, col_name]
class(outcome_df[, col_name])
outcome_df <- outcome_df[, c("Hospital.Name", "State", as.numeric(outcome_df[, col_name]))]
as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[, c("Hospital.Name", "State", as.numeric(outcome_df[, col_name]))]
names(as.numeric(outcome_df[, col_name]))
str(outcome_dgf)
str(outcome_df)
na.omit(col_name)
na.omit(outcome_df)
dim(na.omit(outcome_df))
dim(outcome_df)
dim(outcome_df)
outcome_df <- na.omit(outcome_df)
sapply(outcome_df[col_name], outcome_df['State'], min)
tapply(outcome_df[col_name], outcome_df['State'], min)
split(outcome_df, outcome_df$State)
split_by_states <- split(outcome_df, outcome_df$State)
split_by_states <- split(outcome_df, outcome_df$State)
lapply(split_by_states, min)
min
?min
which.min(c(1,2,3,4,5,56,67,87,98))
complete <- function(directory, id = 1:332){
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(i in id){
opened_file <- read.csv(files[i])
num_complete_cases <- sum(complete.cases(opened_file))
df <- rbind(df, as.numeric(c(i, num_complete_cases)))
}
colnames(df) <- c('id', 'nobs')
df
}
complete('specdata', 1:10)
list.files()
tables()
library(data.table)
tables()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
list.files()
dir.create('Exploratory Data Analysis Week 4')
setwd('Exploratory Data Analysis Week 4/')
if(!dir.exists('data')) dir.create('data')
if(!file.exists('data/data.zip')){
download.file('https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip', 'data/data.zip')
unzip('data/data.zip')
}
?unzip
list.files()
rm('Source_Classification_Code.rds')
rm('summarySCC_PM25.rds')
file.remove('Source_Classification_Code.rds')
file.remove('summarySCC_PM25.rds')
list.files()
unzip('data/data.zip', exdir = 'data')
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- readRDS("data/summarySCC_PM25.rds")
SCC <- readRDS("data/Source_Classification_Code.rds")
dim(nei)
dim(NEI)
str(SEI)
str(NEI)
dim(SCC)
str(SCC)
str(NEI)
rm(list = ls())
scc <- readRDS("data/Source_Classification_Code.rds") # Source Classification Code
nei <- readRDS("data/summarySCC_PM25.rds") # NEI - National Emissions Inventory
str(nei)
table(nei$year)
as.Date('1999')
as.Date('1999', '%Y')
library(dplyr)
nei_by_year <- group_by(nei, nei$year)
nei_by_year
summarize(nei_by_year, sum)
?summarize
summarize(nei_by_year)
summarize(nei_by_year, mean)
str(nei)
summarize(nei_by_year, Emissions, mean)
?summarize
nei_by_year
nei_by_year <- group_by(nei, year)
nei_b
nei_by_year
summarize(nei_by_year, mean)
summarize(nei_by_year)
summarize(nei_by_year, Emissions)
nei_by_year <- group_by(nei, year) %>% summarize(mean_emissions = mean(Emissions))
nei_by_year
plot(nei_by_year)
plot(nei_by_year, type = 'l')
sum()
?sum
nei_by_year <- group_by(nei, year) %>% summarize(mean_emissions = sum(Emissions))
plot(nei_by_year, type = 'l')
nei_by_year <- group_by(nei, year) %>% summarize(total_emissions = sum(Emissions))
plot(nei_by_year, type = 'l')
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons')
str(nei)
head(nei)
sum(nei$Emissions)
max(nei$Emissions)
sort(nei, Emissions)
sort(nei, nei$Emissions)
sort(nei$Emissions)
?sort
sort(nei$Emissions, decreasing = TRUE)
axis(1, at = c(1999, 2002, 2005, 2008))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', axt = 'n')
nei_by_year <- group_by(nei, year) %>% summarize(total_emissions = sum(Emissions))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', axt = 'n')
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
str(nei)
abline(h = c(1999, 2002, 2005, 2008))
abline(v = c(1999, 2002, 2005, 2008))
?Albine
?abline
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', xaxt = 'n')
years = c(1999, 2002, 2005, 2008)
axis(1, at = years)
abline(v = years, lty = 3)
?abline
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', xaxt = 'n')
years = c(1999, 2002, 2005, 2008)
axis(1, at = years)
abline(v = years, lty = 3)
abline(v = years, h = 5000000, lty = 3)
abline(v = years, lty = 3)
?par
, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
dev.off()
png('plot1.png')
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
dev.off()
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total emissions in tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
# Plotting using base plotting system
#png('plot1.png')
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
par(mar = c(5, 5, 5, 5))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
#dev.off()
par(mar = c(5, 5, 2, 2))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 3, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
file.remove('plot1.png')
png('plot1.png')
par(mar = c(5, 6, 3, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
dev.off()
str(nei)
nei_maryland <- filter(nei, fips == '24510')
dim(neinei_by_year)
dim(nei_maryland)
head(nei_maryland)
table(nei_maryland$fips)
par(mar = c(5, 6, 3, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
axis(1, at = c(1999, 2002, 2005, 2008))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n', main = 'To')
par(mar = c(5, 6, 3, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
lines(main = 'Total Emissions in the United States from 1999 to 2008'))
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 3, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
lines(main = 'Total Emissions in the United States from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 3, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
axis(main = 'Total Emissions in the United States from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 3, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in the United States from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 4, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in the United States from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 5, 3))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in the United States from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 5, 4))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in the United States from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
file.remove('plot1.png')
png('plot1.png')
par(mar = c(5, 6, 5, 4))
plot(nei_by_year, type = 'l', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in the United States from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
dev.off()
nei_maryland <- filter(nei, fips == '24510') %>%
group_by(year) %>%
summarize(total_emissions = sum(emissions))
plot(nei_maryland)
nei_maryland <- filter(nei, fips == '24510') %>%
group_by(year) %>%
summarize(total_emissions = sum(Emissions))
plot(nei_maryland)
plot(nei_maryland,kind = 'line')
plot(nei_maryland, type= 'line')
rm(nei_maryland)
nei_baltimore <- filter(nei, fips == '24510') %>%
group_by(year) %>%
summarize(total_emissions = sum(Emissions))
plot(nei_baltimore, type= 'line', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in Baltimore City, Maryland from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
par()
par$mar
par()mar
par()$mar
par(mar = 5, 6, 5, 5)
plot(nei_baltimore, type= 'line', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in Baltimore City, Maryland from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
par(mar = c(5, 6, 5, 5))
plot(nei_baltimore, type= 'line', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in Baltimore City, Maryland from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
png('plot2.png')
par(mar = c(5, 6, 5, 5))
plot(nei_baltimore, type= 'line', xlab = 'Year', ylab = 'Total Emissions in Tons', xaxt = 'n')
title(main = 'Total Emissions in Baltimore City, Maryland from 1999 to 2008')
axis(1, at = c(1999, 2002, 2005, 2008))
dev.off()
str(nei)
table(nei$type)
nei_by_type <- group_by(type)
nei_by_type <- group_by(nei$type)
nei_by_type <- filter(nei, fips == '24510') %>%
group_by(type)
nei_by_type
g <- ggplot(nei_by_type, aes(Emissions, year))
library(ggplot2)
g <- ggplot(nei_by_type, aes(Emissions, year))
g + geom_point()
nei_by_type <- filter(nei, fips == '24510') %>%
group_by(type, year) %>%
summarize(total_emissions = sum(Emissions))
nei_by_type
g <- ggplot(nei_by_type, aes(year, total_emissions))
g + geom_point()
qplot(year, total_emissions, data - nei_by_type, facets = type)
qplot(year, total_emissions, data = nei_by_type, facets = type)
str(nei_by_type)
nei_by_type <- filter(nei, fips == '24510') %>%
group_by(type, year) %>%
summarize(total_emissions = sum(Emissions))
str(nei_by_type)
head(nei_by_type)
qplot(year, total_emissions, data = nei_by_type, facets = type)
qplot(year, total_emissions, facets = type, data = nei_by_type)
qplot(year, total_emissions, facets = nei_by_type$type, data = nei_by_type)
g <- ggplot(nei_by_type, aes(year, total_emissions))
g + geom_point() + facet_grid(year ~ total_emissions)
g <- ggplot(nei_by_type, aes(year, total_emissions))
g + geom_point() + facet_grid(year ~ type)
nei_by_type <- filter(nei, fips == '24510') %>%
group_by(type, year) %>%
g <- ggplot(nei_by_type, aes(year, total_emissions))
g + geom_point() + facet_grid(year ~ type)
nei_by_type <- filter(nei, fips == '24510') %>%
group_by(type, year)
g <- ggplot(nei_by_type, aes(year, total_emissions))
g + geom_point() + facet_grid(year ~ type)
g <- ggplot(nei_by_type, aes(year, Emissions))
g + geom_point() + facet_grid(year ~ type)
g <- ggplot(nei_by_type, aes(year, Emissions))
g + geom_point()
g + geom_point(aes(color = type))
g <- ggplot(nei, aes(year, Emissions))
g + geom_point()
