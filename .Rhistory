outcome_df[outcome_df['State'] == 'IL', ]
dim(outcome_df[outcome_df['State'] == 'IL', ])
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
for(name in names(table(outcome_df$State))){
if(num == 'worst')
num <- nrow(all_hospitals_in_state)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
# Ordering by hospital rating and hospital name, in that order.
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
if(num == 'worst')
num <- nrow(all_hospitals_in_state)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
# Ordering by hospital rating and hospital name, in that order.
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
num <- 'worst'
if(num == 'worst')
num <- nrow(all_hospitals_in_state)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
num
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
ordered_hospitals_in_state[, 'Hospital.Name']
ordered_hospitals_in_state[, c('Hospital.Name', col_name)]
ordered_hospitals_in_state[num, 'Hospital.Name']
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
if(num == 'worst')
num <- nrow(all_hospitals_in_state)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
# Ordering by hospital rating and hospital name, in that order.
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
ordered_hospitals_in_state[, c('Hospital.Name', col_name)]
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
if(num == 'worst')
num <- nrow(all_hospitals_in_state)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
# Ordering by hospital rating and hospital name, in that order.
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
ordered_hospitals_in_state[20, c('Hospital.Name', col_name)]
num
rm(list = ls())
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
if(num == 'worst')
num <- nrow(all_hospitals_in_state)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
# Ordering by hospital rating and hospital name, in that order.
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
num
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
name <- "WY"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
all_hospitals_in_state[$State == 'WY']
all_hospitals_in_state$State == 'WY'
sum(all_hospitals_in_state$State == 'WY')
nrow(all_hospitals_in_state)
num <- nrow(all_hospitals_in_state)
num
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
ordered_hospitals_in_state[num, 'Hospital.Name']
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
if(num == 'worst')
num <- nrow(all_hospitals_in_state)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
# Ordering by hospital rating and hospital name, in that order.
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
name <- "WV"
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
nrow(all_hospitals_in_state)
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
ordered_hospitals_in_state[num, 'Hospital.Name']
ordered_hospitals_in_state[, c(col_name, 'Hospital.Name')]
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
#tail(rankall("heart failure"), 10)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
unique(outcome_df$State)
unique(outcome_df$State) == names(table(outcome_df$State))
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Convert outcome column to numeric and remove rows with NAs in this column
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Creating empty dataframe which we will fill and return later
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
# Looping through each state
for(name in unique(outcome_df$State)){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Convert outcome column to numeric and remove rows with NAs in this column
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Creating empty dataframe which we will fill and return later
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
# Looping through each state
for(name in unique(outcome_df$State)){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
names(table(outcome_df$State))
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Convert outcome column to numeric and remove rows with NAs in this column
outcome_df[, col_name] <- as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[!is.na(outcome_df[, col_name]), ]
# Creating empty dataframe which we will fill and return later
return_df <- data.frame('hospital' = character(0), 'state' = character(0), stringsAsFactors = FALSE)
# Looping through each state
for(name in names(table(outcome_df$State))){
all_hospitals_in_state <- outcome_df[outcome_df['State'] == name, ]
ordered_hospitals_in_state <- all_hospitals_in_state[order(all_hospitals_in_state[col_name], all_hospitals_in_state['Hospital.Name']), ]
if(num == "worst")
hospital <- tail(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num == "best")
hospital <- head(ordered_hospitals_in_state[, 'Hospital.Name'], 1)
else if(num > nrow(all_hospitals_in_state))
hospital <- NA
else
hospital <- ordered_hospitals_in_state[num, 'Hospital.Name']
return_df[nrow(return_df) + 1, ] <- c(hospital, name)
}
return_df
}
tail(rankall("pneumonia", "worst"), 3)
na.omit(outcome_df)
?na.omit
outcome_df <- outcome_df[, c("Hospital.Name", "State", "col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"")]
outcome_df <- outcome_df[, c("Hospital.Name", "State", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")]
names(outcome_df)
names(outcome_df)[2]
names(outcome_df)[3]
names(outcome_df)[3] < "pneumonia"
names(outcome_df)[3] <- "pneumonia"
names(outcome_df)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state %in% outcome_df$State)
stop('invalid state')
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
# Getting required states, converting to numeric, and removing NAs
states <- outcome_df[outcome_df['State'] == state, ]
states[, col_name] <- as.numeric(states[, col_name])
states <- states[!is.na(states[, col_name]), ]
# Check if rank is valid, and use correct numbers depending on "best" or "worst"
if(num == 'best')
num <- 1
else if(num == 'worst')
num <- nrow(states)
else if(num > nrow(states))
return(NA)
# Ordering by hospital rating and hospital name, in that order.
ordered_states <- states[order(states[col_name], states['Hospital.Name']), ]
# Getting nth hospital from ordered states. This is the rank.
hospitals <- ordered_states[, 'Hospital.Name'][num]
hospitals
}
rankhospital("TX", "heart failure", 4)      # "DETAR HOSPITAL NAVARRO
rankhospital("MD", "heart attack", "worst") # "HARFORD MEMORIAL HOSPITAL"
rankhospital("MN", "heart attack", 5000)    # NA
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available", stringsAsFactors = FALSE)
str(outcome_df)
rm(list = ls())
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available", stringsAsFactors = FALSE)
str(outcome_df)
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available", stringsAsFactors = FALSE)
## Check that outcome is valid
if(!outcome %in% c("heart attack", "pneumonia", "heart failure"))
stop('invalid outcome')
# Assign appropriate column names deopending on specified outcome
if(outcome == "heart attack")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
else if(outcome == "heart failure")
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
else
col_name = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
# Subsetting the 3 columns that we need out of the 46 total columns.
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
str(outcome_df)
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
outcome_df[col_name]
sort(outcome_df[col_name])
sort(outcome_df[col_name], )
sort(outcome_df[. col_name])
sort(outcome_df[, col_name])
?read.csv
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_df
outcome_df[, col_name]
default.stringsAsFactors()
outcome_df <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = 'Not Available', stringsAsFactors	= FALSE)
outcome_df <- outcome_df[, c("Hospital.Name", "State", col_name)]
dim(outcome_df)
outcome_df[, col_name]
class(outcome_df[, col_name])
outcome_df <- outcome_df[, c("Hospital.Name", "State", as.numeric(outcome_df[, col_name]))]
as.numeric(outcome_df[, col_name])
outcome_df <- outcome_df[, c("Hospital.Name", "State", as.numeric(outcome_df[, col_name]))]
names(as.numeric(outcome_df[, col_name]))
str(outcome_dgf)
str(outcome_df)
na.omit(col_name)
na.omit(outcome_df)
dim(na.omit(outcome_df))
dim(outcome_df)
dim(outcome_df)
outcome_df <- na.omit(outcome_df)
sapply(outcome_df[col_name], outcome_df['State'], min)
tapply(outcome_df[col_name], outcome_df['State'], min)
split(outcome_df, outcome_df$State)
split_by_states <- split(outcome_df, outcome_df$State)
split_by_states <- split(outcome_df, outcome_df$State)
lapply(split_by_states, min)
min
?min
which.min(c(1,2,3,4,5,56,67,87,98))
complete <- function(directory, id = 1:332){
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(i in id){
opened_file <- read.csv(files[i])
num_complete_cases <- sum(complete.cases(opened_file))
df <- rbind(df, as.numeric(c(i, num_complete_cases)))
}
colnames(df) <- c('id', 'nobs')
df
}
complete('specdata', 1:10)
list.files()
tables()
library(data.table)
tables()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
