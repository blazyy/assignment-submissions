cc <- complete("specdata", 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cc <- complete("specdata", 54)
print(cc$nobs)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cc <- complete("specdata", 54)
print(cc$nobs)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(file in files[id]) df <- rbind(df, read.csv(file))
print(df)
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(file in files[length(files)]) df <- rbind(df, read.csv(file))
print(df)
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(file in files[length(files)]) df <- rbind(df, read.csv(file))
head(df)
tail(df)
as.Date('2003-01-01')
as.Date('2004-12-31') - as.Date('2003-01-01')
end <- as.Date('2004-12-31')
start <- as.Date('2003-01-01')
end-start
unclass(end)
as.POSIXlt(end)
end <- as.POSIXlt(end)
start <- as.POSIXlt(start)
end - start
730/265
730/365
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(file in files[length(files)]) df <- rbind(df, read.csv(file))
head(df)
tail(df)
df
df[1, ]
df[1, Date]
df[1, 'Date']
df[1, ]
df[1, ]['Date']
class(df[1, ]['Date'])
class(df[1, ][['Date']])
as.Date(df[1, ][['Date']])
paste("Values ranging from ", as.Date(df[1, ][['Date']]), " to ", as.Date(df[length(df), ][['Date']]))
paste("Values ranging from", as.Date(df[1, ][['Date']]), "to", as.Date(df[length(df), ][['Date']]))
print("Info about dataset")
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[length(df), ][['Date']])
paste("Values ranging from", start_date, "to", end_date)
print(end_date - start_date)
tail(df)
files <- list.files('specdata', full.names = TRUE)
df <- data.frame()
for(file in files[length(files)]) df <- rbind(df, read.csv(file))
head(df)
tail(df)
files <- list.files('specdata', full.names = TRUE)
df <- data.frame()
for(file in files[length(files)]){df <- rbind(df, read.csv(file))}
head(df)
tail(df)
files <- list.files('specdata', full.names = TRUE)
df <- data.frame()
for(file in files){df <- rbind(df, read.csv(file))}
head(df)
tail(df)
print("Info about dataset")
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[length(df), ][['Date']])
paste("Values ranging from", start_date, "to", end_date)
print(end_date - start_date)
summary(day)
summar(df)
summary(df)
print("Info about dataset")
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[length(df)[1], ][['Date']])
paste("Values ranging from", start_date, "to", end_date)
print(end_date - start_date)
print("Info about dataset")
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[length(df)[1], ][['Date']])
paste("Values ranging from", start_date, "to", end_date)
print(end_date - start_date)
length(df)
print("Info about dataset")
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[dim(df)[1], ][['Date']])
paste("Values ranging from", start_date, "to", end_date)
print(end_date - start_date)
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[dim(df)[1], ][['Date']])
paste("Values ranging from", start_date, "to", end_date, ".", end_date - start_date)
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[dim(df)[1], ][['Date']])
paste("Values ranging from", start_date, "to", end_date, ". Time difference of", end_date - start_date)
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[dim(df)[1], ][['Date']])
paste("Values ranging from", start_date, "to", end_date)
paste(end_date - start_date)
start_date <- as.Date(df[1, ][['Date']])
end_date <- as.Date(df[dim(df)[1], ][['Date']])
paste("Values ranging from", start_date, "to", end_date "with a time difference of ", end_date - start_date,"days")
paste("Values ranging from", start_date, "to", end_date, "with a time difference of ", end_date - start_date,"days")
is.na(df)
df[is.na(df)]
dim(df[is.na(df)])
dim(df[, is.na(df)])
dim(df[is.na(df), ])
dim(df[is.na(df), ])[1]
dim(df)[1]
is.na(df)
df[!is.na(df)]
dim(df[!is.na(df)])
comlete.cases(df)
complete.cases(df)
df[comlete.cases(df)]
df[complete.cases(df)]
df[complete.cases(df), ]
dim(df[complete.cases(df), ])
dim(df)[2]
dim(df)[1]
paste("About", 1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1])), "of the data is missing.")
paste("About", round(1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1])), digits = 2), "of the data is missing.")
paste("About", round(1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1])), digits = 2), "of the data is missing.")
missing_percent <- (1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1]))) * 100
paste("About", round(missing_percent, digits = 2), "of the data is missing.")
missing_percent <- (1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1]))) * 100
paste("About", round(missing_percent, digits = 2), "% of the data is missing.")
missing_percent <- (1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1]))) * 100
paste("About", round(missing_percent, digits = 2), "% of the data is missing.")
missing_percent <- (1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1]))) * 100
paste("Percentage of NAs:", round(missing_percent, digits = 2))
missing_percent <- (1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1]))) * 100
paste("Percentage of NAs:", round(missing_percent, digits = 2), sep = '-')
missing_percent <- (1 - ((dim(df[complete.cases(df), ]))/(dim(df)[1]))) * 100
missing_percent
(dim(df[complete.cases(df), ])
(dim(df[complete.cases(df), ]))
(dim(df[complete.cases(df), ]))
missing_percent <- (1 - ((dim(df[complete.cases(df), ])[1])/(dim(df)[1]))) * 100
paste("Percentage of NAs:", round(missing_percent, digits = 2))
df
is.na(df)
!is.na(df)
colSums(!is.na(df))
sum(!is.na(df))
colSums(complete.cases(df))
complete.cases(df)
class(complete.cases(df))
sum(complete.cases(df))
table(complete.cases(df))[['TRUE']]
sum(complete.cases(df))
table(complete.cases(df))[['TRUE']]
complete <- function(directory, id = 1:332){
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(i in id){
opened_file <- opened_file[complete.cases(read.csv(files[i])), ]
num_complete_cases <- sum(complete.cases(opened_file))
vect <- list(i, num_complete_cases)
df <- rbind(df, vect)
}
colnames(df) <- c('id', 'nobs')
df
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
file
complete <- function(directory, id = 1:332){
files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for(i in id){
opened_file <- read.csv(files[i])
opened_file <- opened_file[complete.cases(opened_file), ]
num_complete_cases <- sum(complete.cases(opened_file))
vect <- list(i, num_complete_cases)
df <- rbind(df, vect)
}
colnames(df) <- c('id', 'nobs')
df
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
sample(332, 10)
sample(332, 10)
sample(332, 10)
sum(complete.cases(df))
complete_cases <- complete.cases(file)
file
df
opened_file <- read.csv(file)
opened_file
complete.cases(opened_file)
sum(sum(complete.cases(df)))
sum(complete.cases(opened_file))
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names = TRUE)
corrs <- vector("numeric") # creating an empty vector
for(file in files){
opened_file <- read.csv(file)
complete_cases <- complete.cases(opened_file) # boolean array of non-null values
observed_cases_count <- sum(complete.cases(opened_file)) # get number of complete cases, only these should be used
# if(dim(opened_file[complete_cases, ])[1] == 0) next
if(observed_cases_count > threshold){
opened_file <- opened_file[complete_cases, ] # getting all non-null rows using boolean vector
correlation <- cor(opened_file['nitrate'], opened_file['sulfate']) # calculating correlation between nitrate and sulfate levels
corrs <- c(corrs, unname(correlation)) # unnaming because cor() function adds names to row and column which is unnecessary
}
}
corrs
}
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata")
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
file <- read.csv('specdata/129.csv')
complete_cases <- complete.cases(opened_file) # boolean array of non-null values
observed_cases_count <- sum(complete.cases(opened_file)) # get number of complete cases, only these should be used
complete_cases
observed_cases_count
opened_file <- opened_file[complete_cases, ]
opened_file['nitrate']
opened_file['sulfate']
corr(opened_file['nitrate'], opened_file['sulfate'])
cor(opened_file['nitrate'], opened_file['sulfate'])
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names = TRUE)
corrs <- vector("numeric") # creating an empty vector
for(file in files){
opened_file <- read.csv(file)
complete_cases <- complete.cases(opened_file) # boolean array of non-null values
observed_cases_count <- sum(complete.cases(opened_file)) # get number of complete cases, only these should be used
if(dim(opened_file[complete_cases, ])[1] == 0) next
if(observed_cases_count > threshold){
opened_file <- opened_file[complete_cases, ] # getting all non-null rows using boolean vector
correlation <- cor(opened_file['nitrate'], opened_file['sulfate']) # calculating correlation between nitrate and sulfate levels
corrs <- c(corrs, unname(correlation)) # unnaming because cor() function adds names to row and column which is unnecessary
}
}
corrs
}
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
for(file in files){
opened_file <- read.csv(file)
complete_cases <- complete.cases(opened_file) # boolean array of non-null values
observed_cases_count <- sum(complete.cases(opened_file))
if(observed_cases_count > 129)
print(file)
for(files)
for(file in files){
opened_file <- read.csv(file)
complete_cases <- complete.cases(opened_file) # boolean array of non-null values
observed_cases_count <- sum(complete.cases(opened_file))
if(observed_cases_count > 129)
print(file)
}
c(n, round(cr[sample(n, 5)], 4))
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata")
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
swirl()
bye()
rstudioapi::addTheme("https://raw.githubusercontent.com/jnolis/synthwave85/master/Synthwave85.rstheme", TRUE, TRUE, FALSE)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
yule_theme <- fs::path_temp("Yule-RStudio", ext = "rstheme")
download.file("https://git.io/yule-rstudio", yule_theme)
rstudioapi::addTheme(yule_theme, apply = TRUE)
oceanic_theme <- fs::path_temp("Oceanic-Eighties", ext = "rstheme")
download.file("https://git.io/rstudio-theme-oceanic-eighties", oceanic_theme)
rstudioapi::addTheme(oceanic_theme, apply = TRUE)
df
class(df)
lapply(df, class)
str(lapply(df, class))
as.character(lapply(df, class))
undebug(ls)
debugonce(ls)
ls()
undebug(ls)
airquality
head(airquality)
tapply(c(airquality$Ozone, airquality$Solar.R, airquality$Wind, airquality$Temp), airquality$Month)
sapply(split(airquality))
sapply(split(airquality), function(x)colMeans(x))
?sapply
apply(airquality, 2, mean)
apply(split(airquality$Month), 2, mean)
?split
apply(split(airquality, airquality$Month), 2, mean)
head(airquality)
?colMeans
colMeans(airquality, na.rm - TRUE)
colMeans(airquality, na.rm - TRUE)
colMeans(airquality)
?mapply
mapply(mean, c(airquality[, 1:4]))
mapply(mean, c(split(airquality, airquality$Month)[, 1:4]))
aqm split(airquality, airquality$Month)
aqm <- split(airquality, airquality$Month)
aqm
mapply(mean, c(aqm[, 1:4]))
sqm[, 1:4]
aqm[, 1:4]
dim(aqm)
class(aqm)
aqm
aqm['8']
swirl()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(0))
ok()
sapply(flags, class)
vapply(flags, unique, character(0))
vapply(flags, unique, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landsmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exit()
airquality
air <- airquality
summary(air)
str(r)
str(air)
?air
?str
str(Str)
str(str)
str(corr)
set.seed(1)
rpois(5, 2)
?set.seed
?qpois
?ppois
rep(0:1, each = 5)
rnorm(10, 0, 20)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
head(tail, 15)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
bye()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<- sample(c(0, 1), 100, replace = TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?Rbinom
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips <- rbinom(1, size = 1, prob = 0.7)
flips <- rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10,100, 25)
rpois()
?rpois
rpois(5, 10)
?replicate
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars$dist, cars$speed)
?plot
plot(cars$speed, cars$dist, xlab = 'Speed')
plot(cars$speed, cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
?plot
plot(cars, main = 'My Plot')
plot(cars, main = 'My Plot Subtitle')
plot(cars, sub = 'My Plot Subtitle')
plot(cars, sub = 'My Plot Subtitle')
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
